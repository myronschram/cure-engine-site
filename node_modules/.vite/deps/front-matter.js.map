{
  "version": 3,
  "sources": ["../../front-matter/index.js"],
  "sourcesContent": ["var parser = require('js-yaml')\nvar optionalByteOrderMark = '\\\\ufeff?'\nvar platform = typeof process !== 'undefined' ? process.platform : ''\nvar pattern = '^(' +\n  optionalByteOrderMark +\n  '(= yaml =|---)' +\n  '$([\\\\s\\\\S]*?)' +\n  '^(?:\\\\2|\\\\.\\\\.\\\\.)\\\\s*' +\n  '$' +\n  (platform === 'win32' ? '\\\\r?' : '') +\n  '(?:\\\\n)?)'\n// NOTE: If this pattern uses the 'g' flag the `regex` variable definition will\n// need to be moved down into the functions that use it.\nvar regex = new RegExp(pattern, 'm')\n\nmodule.exports = extractor\nmodule.exports.test = test\n\nfunction extractor (string, options) {\n  string = string || ''\n  var defaultOptions = { allowUnsafe: false }\n  options = options instanceof Object ? { ...defaultOptions, ...options } : defaultOptions\n  options.allowUnsafe = Boolean(options.allowUnsafe)\n  var lines = string.split(/(\\r?\\n)/)\n  if (lines[0] && /= yaml =|---/.test(lines[0])) {\n    return parse(string, options.allowUnsafe)\n  } else {\n    return {\n      attributes: {},\n      body: string,\n      bodyBegin: 1\n    }\n  }\n}\n\nfunction computeLocation (match, body) {\n  var line = 1\n  var pos = body.indexOf('\\n')\n  var offset = match.index + match[0].length\n\n  while (pos !== -1) {\n    if (pos >= offset) {\n      return line\n    }\n    line++\n    pos = body.indexOf('\\n', pos + 1)\n  }\n\n  return line\n}\n\nfunction parse (string, allowUnsafe) {\n  var match = regex.exec(string)\n  if (!match) {\n    return {\n      attributes: {},\n      body: string,\n      bodyBegin: 1\n    }\n  }\n\n  var loader = allowUnsafe ? parser.load : parser.safeLoad\n  var yaml = match[match.length - 1].replace(/^\\s+|\\s+$/g, '')\n  var attributes = loader(yaml) || {}\n  var body = string.replace(match[0], '')\n  var line = computeLocation(match, string)\n\n  return {\n    attributes: attributes,\n    body: body,\n    bodyBegin: line,\n    frontmatter: yaml\n  }\n}\n\nfunction test (string) {\n  string = string || ''\n\n  return regex.test(string)\n}\n"],
  "mappings": ";;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA,QAAI,SAAS;AACb,QAAI,wBAAwB;AAC5B,QAAI,WAAW,OAAO,YAAY,cAAc,QAAQ,WAAW;AACnE,QAAI,UAAU,OACZ,wBACA,wDAIC,aAAa,UAAU,SAAS,MACjC;AAGF,QAAI,QAAQ,IAAI,OAAO,SAAS,GAAG;AAEnC,WAAO,UAAU;AACjB,WAAO,QAAQ,OAAO;AAEtB,aAAS,UAAW,QAAQ,SAAS;AACnC,eAAS,UAAU;AACnB,UAAI,iBAAiB,EAAE,aAAa,MAAM;AAC1C,gBAAU,mBAAmB,SAAS,EAAE,GAAG,gBAAgB,GAAG,QAAQ,IAAI;AAC1E,cAAQ,cAAc,QAAQ,QAAQ,WAAW;AACjD,UAAI,QAAQ,OAAO,MAAM,SAAS;AAClC,UAAI,MAAM,CAAC,KAAK,eAAe,KAAK,MAAM,CAAC,CAAC,GAAG;AAC7C,eAAO,MAAM,QAAQ,QAAQ,WAAW;AAAA,MAC1C,OAAO;AACL,eAAO;AAAA,UACL,YAAY,CAAC;AAAA,UACb,MAAM;AAAA,UACN,WAAW;AAAA,QACb;AAAA,MACF;AAAA,IACF;AAEA,aAAS,gBAAiB,OAAO,MAAM;AACrC,UAAI,OAAO;AACX,UAAI,MAAM,KAAK,QAAQ,IAAI;AAC3B,UAAI,SAAS,MAAM,QAAQ,MAAM,CAAC,EAAE;AAEpC,aAAO,QAAQ,IAAI;AACjB,YAAI,OAAO,QAAQ;AACjB,iBAAO;AAAA,QACT;AACA;AACA,cAAM,KAAK,QAAQ,MAAM,MAAM,CAAC;AAAA,MAClC;AAEA,aAAO;AAAA,IACT;AAEA,aAAS,MAAO,QAAQ,aAAa;AACnC,UAAI,QAAQ,MAAM,KAAK,MAAM;AAC7B,UAAI,CAAC,OAAO;AACV,eAAO;AAAA,UACL,YAAY,CAAC;AAAA,UACb,MAAM;AAAA,UACN,WAAW;AAAA,QACb;AAAA,MACF;AAEA,UAAI,SAAS,cAAc,OAAO,OAAO,OAAO;AAChD,UAAI,OAAO,MAAM,MAAM,SAAS,CAAC,EAAE,QAAQ,cAAc,EAAE;AAC3D,UAAI,aAAa,OAAO,IAAI,KAAK,CAAC;AAClC,UAAI,OAAO,OAAO,QAAQ,MAAM,CAAC,GAAG,EAAE;AACtC,UAAI,OAAO,gBAAgB,OAAO,MAAM;AAExC,aAAO;AAAA,QACL;AAAA,QACA;AAAA,QACA,WAAW;AAAA,QACX,aAAa;AAAA,MACf;AAAA,IACF;AAEA,aAAS,KAAM,QAAQ;AACrB,eAAS,UAAU;AAEnB,aAAO,MAAM,KAAK,MAAM;AAAA,IAC1B;AAAA;AAAA;",
  "names": []
}
